/*
	in -
	3 notas (0-100), nome, registro
	
	out -
	aprovados ordenadamente - minimo 150 pontos, 40 em cada uma
*/
#include <stdio.h>
#include <conio.h>
#include <stdlib.h>	// necessário p/ as funções rand() e srand()
#include <time.h>	//necessário p/ função time()
#include <iostream>
#include <string.h>	// Necessário para usar strings

using namespace std;

typedef struct cand{
	int matricula;
	float nota1, nota2, nota3, soma;
	char nome[10];
	struct cand *next;
};

int numeroAleatorio(int menor, int maior) {
    return rand()%(maior-menor+1) + menor;
}

void inserir(cand **p, int i, char nome[][10]){
    cand *atual, *novo, *anterior;
    novo = (cand *) malloc(sizeof(cand));
    atual = *p;
    anterior = NULL;
    
    novo->matricula = i;
	novo->nota1 = numeroAleatorio(1, 100);
	novo->nota2 = numeroAleatorio(1, 100);
	novo->nota3 = numeroAleatorio(1, 100);
	strcpy(novo->nome, nome[i]);
	novo->soma = novo->nota1 + novo->nota2 + novo->nota3; 
			
    if(atual == NULL){ // Se não tiver elementos em ptr ele aponta para o nó criado
        novo->next = NULL;
        *p = novo;
    } else{ // Se existir elementos vai checando
        while(atual != NULL && atual->soma > novo->soma){ // Soma do atual maior que o novo? se sim, 
            anterior = atual; // o anterior antes 'nulo' recebe o atual
            atual = atual->next; // atual recebe o próximo
        }
        novo->next = atual; // próximo do que foi criado recebe o atual
        if(anterior == NULL){
            *p = novo;
        } else{
            anterior->next = novo;
        }
    }
}
void imprimirCondicional(cand *ptr, cand *start){
	float notas = 40, status = 150;
	ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Matricula: %d\t", ptr->matricula);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Nome: %s\t", ptr->nome);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Nota1: %0.2f\t", ptr->nota1);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Nota2: %0.2f\t", ptr->nota2);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Nota3: %0.2f\t", ptr->nota3);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		printf("Soma: %0.2f\t", ptr->soma);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL&&ptr->soma>=status&&ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas){
		if(ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas&&(ptr->soma>=status)) {
			printf("Aprovado...\t");	
		}else {
			printf("Reprovado...\t");	
		}
		ptr = ptr->next;
	}
}

void imprimir(cand *ptr, cand *start){
	float notas = 40, status = 150;
	ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Matricula: %d\t", ptr->matricula);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Nome: %s\t", ptr->nome);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Nota1: %0.2f\t", ptr->nota1);
		ptr = ptr->next;
	}
	ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Nota2: %0.2f\t", ptr->nota2);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Nota3: %0.2f\t", ptr->nota3);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL){
		printf("Soma: %0.2f\t", ptr->soma);
		ptr = ptr->next;
	}ptr = start; printf("\n");
	while(ptr!=NULL){
		if(ptr->nota1>=notas&&ptr->nota2>=notas&&ptr->nota3>=notas&&(ptr->soma>=status)) {
			printf("Aprovado...\t");	
		}else {
			printf("Reprovado...\t");	
		}
		ptr = ptr->next;
	}
}

int main(){
	// Variáveis
	cand *ptr, // Apontador para impressão
	*ptr2, // Apontador auxiliar
	*start; // Apontador Corrente
	int n, // Número de candidatos;
	i; // Contador
	float add = 1;
	char nome[6][10] = {"Pedro", "Pepino", "Paulo", "Pombo", "Pedra", "Claro"};
	
	// Estrutura
	start = NULL;
	printf("Esse programa informa a quantidade de alunos aprovadas num concurso.\n");
	printf("A classificacao e medida por uma nota 40 minima em cada prova, e o minimo 150 pontos no total.\n");
	//printf("Preciso saber quantos candidatos serao cadastrados.\n");
	//scanf("%d", &n);
	srand(time(NULL)); // Função para adcionar notas aleatóriamente
	for(i=0;i<6;i++){
		inserir(&start, i, nome);
	}
	imprimirCondicional(ptr, start);
	printf("\n\n\n");
	imprimir(ptr, start);
	
}
