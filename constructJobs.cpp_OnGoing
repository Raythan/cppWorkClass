#include <stdlib.h>
#include <stdio.h>
// eliminar elemento da lista
struct node
	{
		int data;
		struct node *next;
	};
	
int main(){
	struct node *start = NULL; // nexxe momento = NULL
	struct node *ptr2; // ponteiro auxiliar
	int i = 28, num = 28; // Elemento a inserir
	struct node *ptr; // >>>> ponteiro que vai percorrer a lista
	
	node variavel;
	
	while(i != 40){
		ptr = (struct node*) malloc (sizeof(struct node));
		ptr -> data = i;
		ptr -> next = start;
		start = ptr;
		i++;
	}
	printf(">>>>>>>>>>>>>>>>>>>>>Lista enlacada!\n");
	while(ptr!=NULL)
	{			
		printf("DATA: %d\nPTR NEXT: %d\nSTART: %d\n\n", ptr -> data, ptr -> next, start);
		ptr = ptr -> next;
	}
	ptr = start;
	ptr2 = start;
	printf("LISTA ENLACADA 2\n\n");
	while(ptr!=NULL)
	{
		if(ptr2 -> data==38){
			free(ptr2);
		}
		printf("DATA: %d\nPTR NEXT: %d\n\n", ptr2 -> data, ptr2 -> next);
		ptr2 = ptr;
		ptr = ptr -> next;
	}
	
	return 0;
}

--------------------------------------------------------------------------------------------------------------------------------
// this software will specifically remove an id element from linked list
#include <stdlib.h>
#include <stdio.h>

typedef struct test{
	int id;
	struct test *next;
};


int main() {
	test *ptr; // Ponteiro corrente -- Pointer moving
	test *ptr2; // Ponteiro auxiliar -- Support pointer
	int i; // Contador
	for(i=0;i<6;i++){ // For para preencher a lista de 0 a 5 -- 'For' for input numbers to 0~5
		ptr = (test *) malloc(sizeof(test)); // Alocando espaço de memória para o ponteiro -- Reserving memory space
		ptr->id = i; // Incrementando valor ao atributo id -- adding ID number
		ptr->next = ptr; // Incrementando valor ao NEXT -- adding next node
		if(i==5){ // Condicional para colocar NULL no fim da lista...  -- Condicional for add NULL in the last node
			ptr->id = i; // Incrementando valor ao ultimo ID -- adding value to the last ID
			ptr->next = NULL; // Incrementando NULL ao ultimo NEXT -- adding NULL for the last node
		}
		if(i==4){ // Condicional para remover o número da memória referente ao comparativo -- conditional for remove the node comparative
			/*printf("----------------------------------------------\n");
			printf("ptr->id: %d\nptr->next: %d\n\n", ptr->id, ptr->next);
			printf("ptr2->id: %d\nptr2->next: %d\n\n", ptr2->id, ptr2->next);
			printf("Mptr->id: %d\nMptr->next: %d\n\n", &ptr->id, &ptr->next);
			printf("Mptr2->id: %d\nMptr2->next: %d\n\n", &ptr2->id, &ptr2->next);*/ // Some prints for test
			ptr2->next = ptr->next; // Ponteiro auxiliar guardando o valor do próximo nó -- support pointer keeping the current node value
			free(ptr); // Aliviando espaço de memória????????? -- getting free space??????
			printf("Removi ptr\n\n"); // Alerta para informar que removeu o nó correspondente -- Alert for test pointer
			/*printf("ptr->id: %d\nptr->next: %d\n\n", ptr->id, ptr->next);
			printf("ptr2->id: %d\nptr2->next: %d\n\n", ptr2->id, ptr2->next);
			printf("Mptr->id: %d\nMptr->next: %d\n\n", &ptr->id, &ptr->next);
			printf("Mptr2->id: %d\nMptr2->next: %d\n\n", &ptr2->id, &ptr2->next);
			printf("----------------------------------------------\n");*/ // Some prints for test
		}else{
			printf("ptr->id: %d\nptr->next: %d\n\n", ptr->id, ptr->next); // Impressão da lista com excessão do removido no comparador -- print without the node removed
		}
	}
	return 0;
}

--------------------------------------------------------------
// Criar lista adcionando elementos no fim da lista
#include <stdlib.h>
#include <stdio.h>

typedef struct test{
	int id;
	struct test *next;
};


int main() {
	test *ptr; // Ponteiro corrente -- Pointer moving
	test *ptr2; // Ponteiro auxiliar -- Support pointer
	test *start; // Cabeça da lista -- List head
	int i; // Contador
//	ptr = (test *) malloc(sizeof(test)); // Alocando espaço de memória para o ponteiro -- Reserving memory space
	start = NULL;
	//ptr->id = 0;
//	ptr->next = NULL;
	//printf("START->ID: %d\nSTART->NEXT: %d\n\n", start->id, start->next);
	//printf("MMSTART->ID: %d\nMMSTART->NEXT: %d\n\n", &start->id, &start->next);
	for(i=0;i<6;i++){ // For para preencher a lista de 0 a 5 -- 'For' for input numbers to 0~5
	    if ( start == NULL){
		    ptr = (test *) malloc(sizeof(test));
		    start = ptr;
		    start->id = i;
	        start->next = NULL;
			}
		else{ 
	      ptr2 = (test *) malloc(sizeof(test)); 
	      ptr2->next = NULL;
		  ptr2->id = i; 
		  ptr->next = ptr2;
		  ptr = ptr2;
	   } 
	} 
	ptr = start; 
	printf("------------------------\n");
	while ( ptr != NULL) {
		printf("ptr->id: %d \ptr->next: %p \n\n", ptr->id, ptr->next); // Impressão da lista com excessão do removido no comparador -- print without the node removed
		ptr = ptr->next;
	}
	return 0;
}
